/*
 * generated by Xtext 2.23.0
 */
package fr.insa.exp.scoping;

import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

import fr.insa.exp.exp.ExpPackage;
import fr.insa.exp.exp.Val;
import fr.insa.exp.exp.ValRef;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class ExpScopeProvider extends AbstractExpScopeProvider {
    @Override
    public IScope getScope(EObject context, EReference reference) {
    	// We focus on resolving the ref attribute (so ExpPackage.Literals.VAL_REF__REF) of the ValRef class
        if (context instanceof ValRef && reference == ExpPackage.Literals.VAL_REF__REF) {
        	// Getting the root of the model
            EObject rootElement = EcoreUtil2.getRootContainer(context);
            // Getting all the instances of Val in the model
            List<Val> candidates = EcoreUtil2.getAllContentsOfType(rootElement, Val.class);
            // Returning all the candidates for the cross-reference
            return Scopes.scopeFor(
            		candidates,
            		// The function that extracts from the val object the string used for the cross-reference
            		valObj -> QualifiedName.create(valObj.getNameVal()), 
            		IScope.NULLSCOPE);
        }
        return super.getScope(context, reference);
    }
}
