/*
 * generated by Xtext 2.23.0
 */
package fr.insa.exp.generator

import fr.insa.exp.exp.Add
import fr.insa.exp.exp.Div
import fr.insa.exp.exp.ExpArithm
import fr.insa.exp.exp.Literal
import fr.insa.exp.exp.Mult
import fr.insa.exp.exp.Sub
import fr.insa.exp.exp.ValRef
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class ExpGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile('results.txt',
			resource.allContents
				.filter(ExpArithm)
				.head
				.generate
			)
	}
	
	def generate(ExpArithm exp) '''The result is «exp.expression.compute»'''
	
	def dispatch double compute(ValRef ref) {
		return ref.ref.value
	}
	
	def dispatch double compute(Add add) {
		return add.leftOp.compute + add.rightOp.compute;
	}
	
	def dispatch double compute(Div div) {
		return div.leftOp.compute / div.rightOp.compute;
	}
	
	def dispatch double compute(Mult mult) {
		return mult.leftOp.compute * mult.rightOp.compute;
	}
	
	def dispatch double compute(Sub sub) {
		return sub.leftOp.compute - sub.rightOp.compute;
	}
	
	def dispatch double compute(Literal lit) {
		return lit.value;
	}
}
