/*
 * generated by Xtext 2.23.0
 */
package fr.insa.exp.validation;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;

import fr.insa.exp.exp.Div;
import fr.insa.exp.exp.ExpArithm;
import fr.insa.exp.exp.ExpPackage;
import fr.insa.exp.exp.Literal;
import fr.insa.exp.exp.Val;
import fr.insa.exp.exp.ValRef;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class ExpValidator extends AbstractExpValidator {
	
	public static final String DIV_0 = "0-div";
	public static final String DIV_0_MSG = "Cannot divide by 0";
	
	public static final String VAL_DUP = "val-dup";
	public static final String VAL_DUP_MSG = "Already defined";
	
	public static final String NOT_USED = "val-dupnot-used";
	public static final String NOT_USED_MSG = "The value is never used";
	
	@Check
	public void checkDiv0(Div division) {
		// Checking the right literal is not 0
		if (division.getRightOp() instanceof Literal && Double.compare(0d, ((Literal) division.getRightOp()).getValue()) == 0) {
			error(DIV_0_MSG, ExpPackage.Literals.OPERANDS__RIGHT_OP, DIV_0);
		}

		// Checking the right val reference is not 0
		if (division.getRightOp() instanceof ValRef && Double.compare(0d, ((ValRef) division.getRightOp()).getRef().getValue()) == 0) {
			error(DIV_0_MSG, ExpPackage.Literals.OPERANDS__RIGHT_OP, DIV_0);
		}
	}
	
	@Check
	public void checkNoUnsedVal(Val val) {
		// Getting the parent of the val which is an ExpArithm
		// Searching in the ExpArithm for usages of the val
		final var exp = ((ExpArithm) val.eContainer());
		final var content = exp.getExpression().eAllContents();
		EObject next;
		boolean searchAgain = true;
		
		while(content.hasNext() && searchAgain) {
			next = content.next();
			if(next instanceof ValRef && ((ValRef) next).getRef().getName().equals(val.getName())) {
				searchAgain = false;
			}
		}
			
		if(searchAgain) {
			// I want to put the warning on all the 'val' not only on its name.
			// Main reason: the quick fix will removed all the text affected by the warning
			// To do so, I say that this concerns 'exp',
			// it concerns the vals attribute of the ExpArithm 'exp',
			// it concerns the val object of 'vals' located at the given index.
			warning(NOT_USED_MSG, exp, ExpPackage.Literals.EXP_ARITHM__VALS, exp.getVals().indexOf(val), NOT_USED);			
		}
	}
	
	@Check
	public void checkNoDuplicateVal(Val val) {
		if(((ExpArithm) val.eContainer()).getVals()
			.stream()
			.anyMatch(v -> v.getName().equals(val.getName()) && v != val)) {
			error(VAL_DUP_MSG, ExpPackage.Literals.VAL__NAME, VAL_DUP);
		}
	}
}
