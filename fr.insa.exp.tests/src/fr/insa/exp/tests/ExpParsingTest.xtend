/*
 * generated by Xtext 2.23.0
 */
package fr.insa.exp.tests

import com.google.inject.Inject
import fr.insa.exp.exp.ExpArithm
import fr.insa.exp.exp.ExpPackage
import fr.insa.exp.validation.ExpValidator
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.eclipse.emf.common.util.Diagnostic

@ExtendWith(InjectionExtension)
@InjectWith(ExpInjectorProvider)
class ExpParsingTest {
	@Inject
	ParseHelper<ExpArithm> parseHelper
	@Inject 
	extension ValidationTestHelper
	ExpArithm result;
			
	@Test
	def void testAdditionInt() {
		result = parseHelper.parse('''
			+ 1 1
		''')
		Assertions.assertNotNull(result)
		result.assertNoIssues
	}
	
	@Test
	def void testAdditionDouble() {
		result = parseHelper.parse('''
			+ 1.12 1
		''')
		Assertions.assertNotNull(result)
		result.assertNoIssues
	}
	
	@Test
	def void testMultInt() {
		result = parseHelper.parse('''
			* 2 9
		''')
		Assertions.assertNotNull(result)
		result.assertNoIssues
	}
	
	@Test
	def void testMultDouble() {
		result = parseHelper.parse('''
			* 2 9.62
		''')
		Assertions.assertNotNull(result)
		result.assertNoIssues
	}
	
		
	@Test
	def void testSub() {
		result = parseHelper.parse('''
			- 8.65 9.62
		''')
		Assertions.assertNotNull(result)
		result.assertNoIssues
	}
	
	@Test
	def void testDiv() {
		result = parseHelper.parse('''
			/ 12 0
		''')
		Assertions.assertNotNull(result)
		result.assertNoIssues
	}
	
		
	@Test
	def void testAllOps() {
		result = parseHelper.parse('''
		/ 4 + 1 - * 8 9 + 5 5
		''')
		Assertions.assertNotNull(result)
		result.assertNoIssues
	}
	
	@Test
	def void testZero() {
		result = parseHelper.parse('''
			/ 0 12
		''')
	    result.assertError(ExpPackage.Literals.DIV, ExpValidator.DIV_0)
	}
	
	@Test
	def void testVal() {
		result = parseHelper.parse('''
		val foo := 1
		+ 1 2
		''')
		Assertions.assertNotNull(result)
		result.assertNoIssues
	}
	
	@Test
	def void testValRef() {
		result = parseHelper.parse('''
		val foo := 1
		+ foo foo
		''')
		Assertions.assertNotNull(result)
		result.assertNoIssues
	}
	
	@Test
	def void testValRefKO() {
		result = parseHelper.parse('''
		val bar := 1
		+ foo bar
		''')
		
		result.assertError(ExpPackage.Literals.VAL_REF, org.eclipse.xtext.diagnostics.Diagnostic.LINKING_DIAGNOSTIC)
	}
}
