import { createDefaultModule, DefaultModuleContext, inject, LangiumServices, Module, PartialLangiumServices } from 'langium';
import { MyExpressionGeneratedModule } from './generated/module';
import { MyfirstlanguageValidationRegistry, MyfirstlanguageValidator } from './myfirstlanguage-validator';
import { MyFirstLanguageScopeProvider } from './myfirstlanguage-scope';

/**
 * Declaration of custom services - add your own service classes here.
 */
export type MyfirstlanguageAddedServices = {
    validation: {
        MyfirstlanguageValidator: MyfirstlanguageValidator
    }
}

/**
 * Union of Langium default services and your custom services - use this as constructor parameter
 * of custom service classes.
 */
export type MyfirstlanguageServices = LangiumServices & MyfirstlanguageAddedServices

/**
 * Dependency injection module that overrides Langium default services and contributes the
 * declared custom services. The Langium defaults can be partially specified to override only
 * selected services, while the custom services must be fully specified.
 */
export const MyfirstlanguageModule: Module<MyfirstlanguageServices, PartialLangiumServices & MyfirstlanguageAddedServices> = {
    references: {
        ScopeProvider : (injector) => new MyFirstLanguageScopeProvider(injector)
//        ScopeComputation: (injector) => new MyFirstLanguageScopeComputation(injector)
    },
    validation: {
        ValidationRegistry: (injector) => new MyfirstlanguageValidationRegistry(injector),
        MyfirstlanguageValidator: () => new MyfirstlanguageValidator()
    }
};

/**
 * Inject the full set of language services by merging three modules:
 *  - Langium default services
 *  - Services generated by langium-cli
 *  - Services specified in this file
 */
export function createMyfirstlanguageServices(context?: DefaultModuleContext): MyfirstlanguageServices {
    return inject(
        createDefaultModule(context),
        MyExpressionGeneratedModule,
        MyfirstlanguageModule
    );
}
